df$type <- as.character(df$type)
df <- rbind(df, c("oj1", lloj1, meanoj1, uloj1))
df <- rbind(df, c("oj2", lloj2, meanoj2, uloj2))
df <- rbind(df, c("vc05", llvc05, meanvc05, ulvc05))
df <- rbind(df, c("vc1", llvc1, meanvc1, ulvc1))
df <- rbind(df, c("vc2", llvc2, meanvc2, ulvc2))
df
df = NULL
df <- data.frame(supptype = "OJ", dose = 0.5, ll = lloj05, mns = meanoj05, ul = uloj05)
df$type <- as.character(df$type)
df <- rbind(df, c("OJ", 1, lloj1, meanoj1, uloj1))
df <- rbind(df, c("OJ", 2, lloj2, meanoj2, uloj2))
df <- rbind(df, c("VC", 0.5, llvc05, meanvc05, ulvc05))
df <- rbind(df, c("VC", 1, llvc1, meanvc1, ulvc1))
df <- rbind(df, c("VC", 2, llvc2, meanvc2, ulvc2))
df = NULL
df <- data.frame(supp = "OJ", dose = 0.5, ll = lloj05, mns = meanoj05, ul = uloj05)
df$supp <- as.character(df$type)
df <- rbind(df, c("OJ", 1, lloj1, meanoj1, uloj1))
df <- rbind(df, c("OJ", 2, lloj2, meanoj2, uloj2))
df <- rbind(df, c("VC", 0.5, llvc05, meanvc05, ulvc05))
df <- rbind(df, c("VC", 1, llvc1, meanvc1, ulvc1))
df <- rbind(df, c("VC", 2, llvc2, meanvc2, ulvc2))
f = NULL
df <- data.frame(supp = "OJ", dose = 0.5, ll = lloj05, mns = meanoj05, ul = uloj05)
df$supp <- as.cha
df <- data.frame(supp = "OJ", dose = 0.5, ll = lloj05, mns = meanoj05, ul = uloj05)
df$supp <- as.character(df$type)
str(df)
df <- data.frame(supp = "OJ", dose = 0.5, ll = lloj05, mns = meanoj05, ul = uloj05)
df$supp <- as.character(df$supp)
str(df)
df = NULL
df <- data.frame(supp = "OJ", dose = 0.5, ll = lloj05, mns = meanoj05, ul = uloj05)
df$supp <- as.character(df$supp)
str(df)
df <- rbind(df, c("OJ", 1, lloj1, meanoj1, uloj1))
df <- rbind(df, c("OJ", 2, lloj2, meanoj2, uloj2))
df <- rbind(df, c("VC", 0.5, llvc05, meanvc05, ulvc05))
df <- rbind(df, c("VC", 1, llvc1, meanvc1, ulvc1))
df <- rbind(df, c("VC", 2, llvc2, meanvc2, ulvc2))
str(df)
df = NULL
df <- data.frame(supp = "OJ", dose = 0.5, ll = lloj05, mns = meanoj05, ul = uloj05)
df$supp <- as.character(df$supp)
str(df)
df <- rbind(df, c("OJ", 1, lloj1, meanoj1, uloj1))
df <- rbind(df, c("OJ", 2, lloj2, meanoj2, uloj2))
df <- rbind(df, c("VC", 0.5, llvc05, meanvc05, ulvc05))
df <- rbind(df, c("VC", 1, llvc1, meanvc1, ulvc1))
df <- rbind(df, c("VC", 2, llvc2, meanvc2, ulvc2))
df
str(df)
df = NULL
df <- data.frame(supp = "OJ", dose = 0.5, ll = lloj05, mns = meanoj05, ul = uloj05)
df$supp <- as.character(df$supp)
df <- rbind(df, c("OJ", 1, lloj1, meanoj1, uloj1))
df <- rbind(df, c("OJ", 2, lloj2, meanoj2, uloj2))
df <- rbind(df, c("VC", 0.5, llvc05, meanvc05, ulvc05))
df <- rbind(df, c("VC", 1, llvc1, meanvc1, ulvc1))
df <- rbind(df, c("VC", 2, llvc2, meanvc2, ulvc2))
df$supp <- as.factor(df$supp)
df$dose <- as.numeric(df$dose)
df$ll <- as.numeric(df$ll)
df$mns <- as.numeric(df$mns)
df$ul <- as.numeric(df$ul)
str(df)
q <- ggplot(df, aes(x = mns))
q <- q + + geom_linerange()
q
dff
df
q <- ggplot(df, aes(x = supp, y = mean, ymin = ll, ymax=ul, colour = dose))
q <- q + + geom_linerange()
q
df = NULL
df <- data.frame(type = "OJ05", ll = lloj05, mns = meanoj05, ul = uloj05)
df$type <- as.character(df$type)
df <- rbind(df, c("OJ1", lloj1, meanoj1, uloj1))
df <- rbind(df, c("OJ2", lloj2, meanoj2, uloj2))
df <- rbind(df, c("VC05", llvc05, meanvc05, ulvc05))
df <- rbind(df, c("VC1", llvc1, meanvc1, ulvc1))
df <- rbind(df, c("VC2", llvc2, meanvc2, ulvc2))
df$type <- as.factor(df$type)
df$ll <- as.numeric(df$ll)
df$mns <- as.numeric(df$mns)
df$ul <- as.numeric(df$ul)
df
str(df)
q <- ggplot(df, aes(x = type, y = mean, ymin = ll, ymax=ul, color = type))
q <- q + + geom_linerange()
q
dmod <- lm(price ~ cut, data=diamonds)
cuts <- data.frame(cut=unique(diamonds$cut), predict(dmod, data.frame(cut = unique(diamonds$cut)), se=TRUE)[c("fit","se.fit")])
str(cuts)
df2 = NULL
df2 <- data.frame(type = "OJ05", mns = meanoj05, se.mns = qnorm(0.975) * sdoj05)
df2
str(df2)
df2$type <- as.character(df$type)
df2 <- data.frame(type = "OJ05", mns = meanoj05, se.mns = qnorm(0.975) * sdoj05)
df2$type <- as.character(df2$type)
str(df2)
df2 = NULL
df2 <- data.frame(type = "OJ05", mns = meanoj05, se.mns = qnorm(0.975) * sdoj05)
df2$type <- as.character(df2$type)
df2 <- rbind(df2, c("OJ1", meanoj1, qnorm(0.975) * sdoj1))
df2 <- rbind(df2, c("OJ2", meanoj2, qnorm(0.975) * sdoj2))
df2 <- rbind(df2, c("VC05", meanvc05, qnorm(0.975) * sdvc05))
df2 <- rbind(df2, c("VC1", meanvc1, qnorm(0.975) * sdvc1))
df2 <- rbind(df2, c("VC2", meanvc2, qnorm(0.975) * sdvc2))
df2
str(df2)
df2 = NULL
df2 <- data.frame(type = "OJ05", mns = meanoj05, se.mns = qnorm(0.975) * sdoj05)
df2$type <- as.character(df2$type)
df2 <- rbind(df2, c("OJ1", meanoj1, qnorm(0.975) * sdoj1))
df2 <- rbind(df2, c("OJ2", meanoj2, qnorm(0.975) * sdoj2))
df2 <- rbind(df2, c("VC05", meanvc05, qnorm(0.975) * sdvc05))
df2 <- rbind(df2, c("VC1", meanvc1, qnorm(0.975) * sdvc1))
df2 <- rbind(df2, c("VC2", meanvc2, qnorm(0.975) * sdvc2))
df2$type <- as.factor(df2$type)
df2$mns <- as.numeric(df2$mns)
df2$se.mns <- as.numeric(df2$se.mns)
df2
str(df2)
q <- ggplot(df, aes(x = type, y = mns, ymin = mns - se.mns, ymax= mns + se.mns, color = type))
q <- q + geom_linerange()
q
q <- ggplot(df2, aes(x = type, y = mns, ymin = mns - se.mns, ymax= mns + se.mns, color = type))
q <- q + geom_linerange()
q
q <- ggplot(df2, aes(x = type, y = mns, ymin = mns - se.mns, ymax= mns + se.mns, color = type))
q <- q + geom_linerange() + coord_flip()
q
df2 = NULL
df2 <- data.frame(type = "OJ05", mns = meanoj05, se.mns = qnorm(0.975) * sdoj05)
df2$type <- as.character(df2$type)
df2 <- rbind(df2, c("OJ1", meanoj1, qnorm(0.975) * sdoj1))
df2 <- rbind(df2, c("OJ2", meanoj2, qnorm(0.975) * sdoj2))
df2 <- rbind(df2, c("VC05", meanvc05, qnorm(0.975) * sdvc05))
df2 <- rbind(df2, c("VC1", meanvc1, qnorm(0.975) * sdvc1))
df2 <- rbind(df2, c("VC2", meanvc2, qnorm(0.975) * sdvc2))
df2$type <- as.factor(df2$type)
df2$mns <- as.numeric(df2$mns)
df2$se.mns <- as.numeric(df2$se.mns)
df2
## plot chart
q <- ggplot(df2, aes(x = type, y = mns, ymin = mns - se.mns, ymax= mns + se.mns, color = type))
q <- q + geom_linerange() + coord_flip()
q
q <- ggplot(df2, aes(x = type, y = mns, ymin = mns - se.mns, ymax= mns + se.mns, color = type))
q <- q + geom_linerange() + geom_pointrange() + coord_flip()
q
q <- ggplot(df2, aes(x = type, y = mns, ymin = mns - se.mns, ymax= mns + se.mns, color = type))
q <- q + geom_linerange() + geom_pointrange() + coord_flip()
q <- q + labs(title = "95% Confidence Intervals of all Supplement and Dose Options", x = "Tooth Lenght", y = "Supplement Type and Dose Combinations")
q
q <- ggplot(df2, aes(x = type, y = mns, ymin = mns - se.mns, ymax= mns + se.mns, color = type))
q <- q + geom_linerange() + geom_pointrange() + coord_flip()
q <- q + labs(title = "95% Confidence Intervals of all Supplement and Dose Options", y = "Tooth Length", x = "Supplement Type and Dose Combinations")
q
p <- ggplot(ToothGrowth, aes(x = len))
p <- p + geom_histogram(binwidth = 1)
p <- p + labs(title = "Tooth length by supplement type and dosage", x = "Tooth Length", y = "Count")
p <- p + facet_grid(dose ~ supp)
p
set.seed(500)
hist(rexp(1000, 0.2), breaks = 30, col = "blue", xlab = "Value", main = "1000 Random Exponential Distribution Values")
?there
?theme
p <- ggplot(ToothGrowth, aes(x = len))
p <- p + geom_histogram(binwidth = 1)
p <- p + labs(title = "Tooth length by supplement type and dosage", x = "Tooth Length", y = "Count")
p <- p + facet_grid(dose ~ supp)
p
data(sleep)
head(sleep)
tail(sleep)
mn <- 1100
n <- 9
stdev <- 30
mn + c(-1, 1) * qt(0.975, n-1) * stdev /sqrt(n)
mn <- -2
mn + c(-1, 1) * qt(0.975, n-1) * 2.1 /sqrt(n)
mn + c(-1, 1) * qt(0.975, n-1) * 2.6 /sqrt(n)
mnNew <- 3
mnOld <- 5
vNew <- 0.6
vOld <- 0.68
sp <- sqrt((9 * vNew + 9 * vOld)/(10+10-2))
sp
mnNew - mnOld + c(-1,1)*qt(0.975, 18) * sp * (1/10 + 1/10)^0.5
mnNew <- 4
mnOld <- 6
sdNew <- 0.5
sdOld <- 2
spz <- sqrt(((100-1) * sdNew^2 + (100-1) * sdOld^2)/(100+100-2))
spz
mnOld-mnNew + c(-1,1) * qnorm(0.975) * spz * (1/100 + 1/100)^0.5
mn7t <- -3
mn7p <- -1
mn7p <- 1
nx <- 9
ny <- 9
sd7t <- 1.5
sd7p <- 1.8
sp7 <- sqrt(((nx-1) * sd7t^2 + (ny-1) * sd7p^2)/(nx+ny-2))
sp7
mn7t - mn7p + c(-1,1) * qt(0.95, 17) * sp7 * (1/nx + 1/ny)^0.5
mn7t - mn7p + c(-1,1) * qt(0.95, 16) * sp7 * (1/nx + 1/ny)^0.5
q1 <- data.frame("Subject" = 1:5, "Baseline" = c(140, 138, 150, 148, 135), Week2 = c(132, 135, 151, 146, 130))
q1
t.test(q1$Baseline, q1$Week2, paired = TRUE)
q2mean <- 1100
q2sd <- 30
q2n <- 9
q2mean + c(-1,1) * qt(.975, q2n-1) * q2sd/sqrt(q2n)
pbinom(3, size = 4, prob = 0.5, lower.tail = false)
pbinom(3, size = 4, prob = 0.5, lower.tail = FALSE)
pbinom(2, size = 4, prob = 0.5, lower.tail = FALSE)
pbinom(2, size = 4, prob = 0.5, lower.tail = TREU)
pbinom(2, size = 4, prob = 0.5, lower.tail = TRUE)
=0.3125*2
0.3125*2
ppois(10/1787, (1/100 * 1787))
10/1787
1787*0.01
ppois(10, (1/100 * 1787))
q5n <- 9
q5pmean <- -3
q5pmean <- 1
q5tmean <- -3
q5psd <- 1.5
q5psd <- 1.8
q5tsd <- 1.5
q5sp <- sqrt(((q5n-1)*q5tsd^2 + (q5n-1)*q5psd^2)/(q5n + q5n - 2)
)
q5sp <- sqrt(((q5n-1)*q5tsd^2 + (q5n-1)*q5psd^2)/(q5n + q5n - 2))
q5sp
qt(0.975, 17)
t <- qt(0.975, 17)
t <- qt(0.975, 16)
t
pt(t, 17)
pt(t, 17)*2
pt(t, 16)
t1 <- qt(0.025, 16)
pt(t1, 16)
pt(t1, 16)*2
t1 <- qt(0.05, 16)
pt(t1, 16)*2
(0.01 * sqrt(100))/0.04
((q5tmean - q5pmean)*sqrt(2 * q5n - 2) / q5sp
)
((q5tmean - q5pmean)*sqrt(2 * q5n - 2)) / q5sp
pt(((q5tmean - q5pmean)*sqrt(2 * q5n - 2)) / q5sp, 2*q5n -2)
(pt(((q5tmean - q5pmean)*sqrt(2 * q5n - 2)) / q5sp, 2*q5n -2)) * 2
1-.95
swirl()
library(swirl)
install.packages("RSiteCatalyst")
install.packages("RSiteCatalyst")
install.packages("ggplot2")
library(usingR)
install.packages("UsingR")
library(UsingR)
install.packages("manipulate")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
train1 <- vowel.train
test1 <- vowel.test
str(train1)
test1$y <- as.factor(test1$y)
train1$y <- as.factor(train1$y)
str(train1)
modrf <- train(y ~ ., data = train1, method = "rf")
library(caret)
modrf <- train(y ~ ., data = train1, method = "rf")
predrf <- predict(modrf, train1)
confusionMatrix(train$y, predrf)
confusionMatrix(train1$y, predrf)
View(predrf)
summary(predrf)
summary(train1$y)
View(train1)
528/11
predrftest <- predict(modrf, test1)
confusionMatrix(test1, predrftest)
confusionMatrix(test1$y, predrftest)
modgbm <- train(y ~ ., data = train1, method = "gbm")
predgbm <- predict(modgbm, test1)
result1 <- confusionMatrix(test1$y, predgbm)
summary(result1)
result1$accuracy
confusionMatrix(test1$y, predgbm)
combined1 <- data.frame(predrftest, predgbm, test$y)
combined1 <- data.frame(predrftest, predgbm, test1$y)
confusionMatrix(predrftest, predgbm, test1$y)
head(combined1)
combined1$result <- ifelse((combined1$predrftest == combined1$test1.y || combined1$predgbm == combined1$test1.y), 1, 2)
head(combined1, 10)
combined1$result <- ifelse((combined1$predrftest == combined1$test1.y && combined1$predgbm == combined1$test1.y), 1, 2)
head(combined1, 10)
combined1$result <- ifelse((combined1$predrftest == combined1$test1.y & combined1$predgbm == combined1$test1.y), 1, 2)
head(combined1, 10)
tail(combined1, 20)
sum(combined1$result == 1)
sum(combined1$result == 1)/length(combined1$result)
sum(combined1$predrftest==combined1$predgbm)
sum(combined1$predrftest==combined1$predgbm)/length(combined1$predgbm)
205/317
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modrf1 <- train(diagnosis ~ ., data = training, method = "rf", verbose = FALSE)
modgbm2 <- train(diagnosis ~ ., data = training, method = "gbm", verbose = FALSE)
modlda2 <- train(diagnosis ~ ., data = training, method = "lda", verbose = FALSE)
summary(modlda2)
predrf2 <- predict(modrf1, testing)
predgbm2 <- predict(modgbm2, testing)
predlda2 <- predict(modlda2, testing)
results2 <- data.frame(predrf2, predgbm2, predlda2, testing$diagnosis)
head(results2)
results2 <- data.frame(predrf2, predgbm2, predlda2, diagnosis = testing$diagnosis)
head(results2)
combmodfit2 <- train(diagnosis ~ ., data = results2, method = "gam")
predcomb <- predict(combmodfit2, results2)
head(predcomb)
predcomb
confusionMatrix(results2$diagnosis, predcomb)
combmodfit2 <- train(diagnosis ~ ., data = results2, method = "rf")
predcomb <- predict(combmodfit2, results2)
confusionMatrix(results2$diagnosis, predcomb)
confusionMatrix(predrf2, testing$diagnosis)
confusionMatrix(predgbm2, testing$diagnosis)
confusionMatrix(predlda2, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?plot.enet
mod3 <- train(CompressiveStrength ~ ., data = training, method = "lasso")
mod3
?plot.enet
plot.enet(mod3)
pred3 <- predict(mod3, testing$CompressiveStrength)
plot.enet(mod3, xvar = "penalty")
plot.enet(pred3, xvar = "penalty")
str(mod3)
plot.enet(mod3, xvar = "penalty")
plot.enet(as.matrix(mod3), xvar = "penalty")
mod3 <- train(CompressiveStrength ~ ., data = training, method = "lasso")
pred3 <- predict(mod3, testing)
plot.enet(pred3, xvar = "penalty")
plot.enet(as.matrix(pred3), xvar = "penalty")
mod3$finalModel
plot.enet(mod3.FinalModel, xvar = "penalty", use.color = TRUE)
plot.enet(mod3$FinalModel, xvar = "penalty", use.color = TRUE)
plot.enet(as.matrix(mod3$FinalModel), xvar = "penalty", use.color = TRUE)
url <- "http://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(url, q4q4, method = "curl")
download.file(url, q4q4.csv, method = "curl")
download.file(url = url, destfile = q4q4.csv, method = "curl")
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(url = url, destfile = "q4q4.csv", method = "curl")
library(lubridate)  # For year() function below
dat = read.csv("q4q4.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("q4q4.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
?bats
q4bats <- bats(training)
head(training)
head(training$date)
q4bats <- bats(training$date)
q4bats1 <- bats(tstrain)
tstest <- ts(testing$visitsTumblr)
predict(q4bats1, tstest)
plot.enet(mod3$finalModel, xvar = "penalty", use.color = TRUE)
str(q4bats)
diff(q4bats)
dim(q4bats)
dim(q4bats1)
summary(q4bats1)
class(q4bats)
class(q4bats1)
forecast(q4bats1)
forecast(q4bats)
View(tstest)
q4batststest <- bats(tstest)
forecast(q4batststest)
View(testing)
View(training)
results4 <- forecast(q4bats1, h = 235)
head(results4)
View(results4)
results4$test <- testing$visitsTumblr
View(results4)
results4 <- forecast(q4bats1, h = 235)
head(testing)
head(tstest)
results4$test <- tstest
head(results4)
View(results4)
results4b <- data.frame(results4)
View(results4b)
head(results4b$Lo.95)
results4b$test <- tstest
results4b$correct <- ifelse(results4b$test >= results4b$Lo.95 & results4b$test <= results4b$Hi.95, 1, 0)
sum(results4b$correct)
sum(results4b$correct)/length(results4b$correct)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("e1071")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svm(testing)
summary(svm(testing))
mod5 <- svm(CompressiveStrength ~ ., data = testing)
summary(mod5)
RMSE(mod5, testing)
RMSE(mod5, testing$CompressiveStrength)
mod5train <- svm(CompressiveStrength ~ ., data = training)
pred5 <- predict(mod5train, testing)
confusionMatrix(pred5, testing$CompressiveStrength)
head(pred5)
head(testing)
sqrt(sum((pred5-testing$CompressiveStrength)^2))
RMSE(pred = pred5, obs = testing$CompressiveStrength)
install.packages("shiny")
library(shiny)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='russmac', token='C001CB0F372032C43E9A123747A4F5DD', secret='N9beQJbTOFTRXKKNhg/x4Sx0Ba0urmJWdEr3pr86')
library(shinyapps)
getwd()
setwd("/Users/russmacbeth/githubtry/course9/shiny")
getwd()
library(shinyapps)
shinyapps::deployApp('/Users/russmacbeth/githubtry/Course9/Shiny')
data("airquality")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("ramnathv/rCharts@dev")
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
dTable(airquality, sPaginationType = "full_numbers")
library("rcharts")
library("rCharts")
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
install.packages("shiny")
library(shiny)
library(shinyapps)
shinyapps::deployApp('/Users/russmacbeth/githubtry/Course9/Shiny')
devtools::install_github('rstudio/packrat')
shinyapps::deployApp('/Users/russmacbeth/githubtry/Course9/Shiny')
shinyapps::deployApp('/Users/russmacbeth/githubtry/Course9/Shiny')
shinyapps::deployApp('/Users/russmacbeth/githubtry/Course9/Shiny')
shinyapps::deployApp('/Users/russmacbeth/githubtry/Course9/Shiny')
